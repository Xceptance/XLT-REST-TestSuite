 ------------------
 Default Validation
 --------------
 Patrick Thaele
 ----------
 2014-02-20


Default Validation    
    
    
 Especially during a load test a default validation for a configured 
 resource is desired. A load test script should focus on the main 
 operations. Several additional lines per REST call that verify the 
 response always the same way would increase the number of lines in 
 the load test script dramatically. Therefore XRT provides a way for 
 default validation.
 
 You can include default validation in your REST call definition classes 
 just by providing the following <static> methods. The lookup of these methods
 is done via Java Reflection.

+---------------
/**
* The REST call definition class.
*/
@ResourceDefinition( actionName="test action", resourcePath = "myResource" )
@HttpMethodDefinition( HttpMethod.GET )
public abstract class ExampleClazz
{
	/**
	* Allows to validate the status code of the REST call response.
	*
	* @param statusCode The status code returned by the REST call, e.g. 200 or 404.
	*/
	public static void validateStatusCode( final int statusCode )
	{
		// Your validation code here.
	}
	
	/**
	* Allows to validate the response HTTP headers of the REST call.
	*
	* @param headerList The list of the response HTTP headers, e.g. "Content-Type".
	*/
	public static void validateResponseHeaders( final List<NameValuePair> headerList )
	{
		// Your validation code here.
	}
	
	/**
	* Allows to validate the response body of the REST call.
	*
	* @param body The body of the response as String.
	*/
	public static void validateResponseBody( final String body )
	{
		// Your validation code here.
	}
	
	/**
	* Allows to validate the response body of the REST call.
	*
	* @param body The body of the response as JSON.
	*/
	public static void validateResponseBody( final JSON body )
	{
		// Your validation code here.
	}
}
+---------------

* Several Resource Definition classes

 Several resource definition classes can have different default validation methods. When
 you apply several of them at a REST call instance all of them are performed after the REST
 call was performed. That means for example that <<validateResponseHeaders()>> can be 
 performed several times. But that also allows to have resource definition classes exclusively 
 for validation.
 
* Disable Default Validation at RESTCall Level

 In certain situations you might need to disable default validation. The RESTCall class
 provides methods to overcome these situations:
 
+---------------
RESTCall.defaultValidation( boolean );
RESTCall.defaultResponseCodeValidation( boolean );
RESTCall.defaultResponseHeaderValidation( boolean );
RESTCall.defaultResponseBodyValidation( boolean ); 
+--------------
 
 For more information please read the JavaDoc of the RESTCall class.