 ------------------
 Default Validation
 --------------
 Patrick Thaele
 ----------
 2014-02-20


Default Validation    
    
    
 Especially during a load test a default validation for a configured 
 resource is desired. A load test script should focus on the main 
 operations. Several additional lines per REST call that verify the 
 response always the same way would increase the number of lines in 
 the load test script dramatically. Therefore XRT provides a way for 
 default validation.
 
 You can include default validation in your REST call definition classes 
 just by implementing the interface AutoValidatable.

+---------------
/**
* The REST call definition class.
*/
@ResourceDefinition( actionName="test action", resourcePath = "myResource" )
@HttpMethodDefinition( HttpMethod.GET )
public abstract class ExampleClazz implements AutoValidatable
{
	@override
	public void validate( RESTCallValidator call )
	{
		// Sample validation code
		assertEquals( 200, call.getResponseStatusCode() );
	}
}
+---------------

* Several Resource Definition classes

 Several resource definition classes can have different default validation methods. When
 you apply several of them at a REST call instance all of them are performed after the REST
 call was performed. That also allows to have resource definition classes exclusively 
 for validation.
 
* Disable Default Validation

 In certain situations you might need to disable default validation. The RESTCall class
 provides a method to overcome these situations. Note that the following method can override the global settings.
 
+---------------
RESTCall.defaultValidation( false );
+---------------
 
 It's even possible to enable/disable default validation for certain definition classes via these methods:

+---------------
// Creates a new RESTCall instance with default validation disabled for the provided definition class.
RESTCall call = new RESTCall( ExampleClazz.class, false ); 

// Disables default validation for a second resource definition
call.setDefinitionClass( SecondExampleClazz.class, false );

// Enable disabled default validation for a single resource definition
call.defaultValidation( ExampleClazz.class, true );
+---------------

 These methods remove or add a resource definition from the list of elements where default validation should be applied.
 You will see the same effect by providing the class annotation @DisableDefaultValidation at resource definition level:

+---------------
/**
* The REST call definition class.
*/
@ResourceDefinition( actionName="test action", resourcePath = "myResource" )
@HttpMethodDefinition( HttpMethod.GET )
@DisableDefaultValidation
public abstract class ExampleClazz implements AutoValidatable
{
	@override
	public void validate( RESTCallValidator call )
	{
		// Sample validation code no longer executed
		...
	}
}
+---------------

 Default validation also can be disabled via global settings:
 
+---------------
com.xceptance.xrt.defaultValidation.enabled=false
+---------------

 
 For more information please read the JavaDoc of the RESTCall class.